#!/bin/bash

set -e

export OCI_HOST=""
export OCI_BUILDER=""
export JQ=""
export LIMIT_TO_ARCH="current"
export WILL_PUBLISH="false"
export DEFAULT_PULL_POLICY="never"

# Check if a command exists
exists() {
  command -v "$1" >/dev/null 2>&1
}

# Handle Args
for arg in "$@"
do
  case $arg in
    -o | --oci-host | -O | --oci-builder | --jq | --arch)
      echo "Invalid Syntax: Did you put a space instead of an equals?"
      exit 1;
      ;;
    -o=* | --oci-host=*)
      OCI_HOST="${arg#*=}"
      shift
      ;;
    -O=* | --oci-builder=*)
      OCI_BUILDER="${arg#*=}"
      shift
      ;;
    --jq=*)
      JQ="${arg#*=}"
      shift
      ;;
    --arch=*)
      LIMIT_TO_ARCH="${arg#*=}"
      shift
      ;;
    --publish | --publish=true)
      WILL_PUBLISH=true
      shift
      ;;
    --no-publish | --publish=false)
      WILL_PUBLISH=false
      shift
      ;;
    --default-pull-policy=always | --default-pull-policy=missing | --default-pull-policy=never | --default-pull-policy=newer)
      # TODO: document this ^
      DEFAULT_PULL_POLICY="${arg#*=}"
      shift
      ;;
    --publish=*)
      echo "Invalid Publish Option: ${arg#*=}"
      exit 1;
      ;;
    --help | -h)
      echo -ne "Usage: ./configure [...options]

Options:
  --oci-host=OCI_HOST -o=OCI_HOST         Specifies which OCI host to use for pushing
                                            to Docker Hub. Defaults to Podman if
                                            installed, otherwise uses Docker.
  --oci-builder=BUILDER -O=BUILDER        Specifies which OCI builder to use for
                                            building images. Defaults to Buildah if
                                            podman is the OCI host, otherwise uses
                                            Docker.
  --jq=JQ                                 Specifies which jq executable to use.
  --arch=ARCH                             Limit to building for the ARCH architecture.
                                            Defaults to your current CPU architecture.
                                            'all' = Not limited.
                                            'current' = Let OCI Host figure it out
  --publish --publish=true                If specified, will publish to Dockerhub.
                                            To explicitly specify not to do this, add
                                            --no-publish or --publish=false to args
  --help -h                               Display this help message and exit.
  --license -l                            Display the licence and exit.
";
      exit 0;
      ;;
    --license | -l)
      make license;
      exit 0;
      ;;
    *)
      # Unknown options
      echo "WARN: Unknown option $arg" >&2
      ;;
  esac
done

handleOCIHost() {
  echo -n "Checking for OCI Host... "
  if [ -z "$OCI_HOST" ]; then
    if exists "podman"; then
      OCI_HOST="$(which "podman")"
    elif exists "docker"; then
      OCI_HOST="$(which "docker")"
    else
      echo -e "err: neither docker nor podman exist"
      exit 1
    fi;
  fi;
  echo "ok: $OCI_HOST"
}
handleOCIBuilder() {
  echo -n "Checking for OCI Builder... "
  if [ -z "$OCI_BUILDER" ]; then
    if [[ "$(basename "$OCI_HOST")" == "podman" ]]; then
      if ! exists "buildah"; then
        echo "err: buildah not installed, ocihost is podman" 1>&2
        exit 1
      fi;
      OCI_BUILDER="$(which "buildah")"
    elif [[ "$(basename "$OCI_HOST")" == "docker" ]]; then
      OCI_BUILDER="$(which "docker")"
    elif exists "buildah"; then
      OCI_BUILDER="$(which "buildah")"
    elif exists "docker"; then
      OCI_BUILDER="$(which "docker")"
    else
      echo -e "err: unknown builder for ocihost $OCI_HOST"
      exit 1
    fi;
  fi;
  if [[ "$(basename $OCI_BUILDER)" == "buildah" ]]; then
    # We depend on buildah v1.33 or above
    BUILDAH_VERSION="$(buildah --version | awk '{print $3}')"
    BUILDAH_VERSION_SPACES="$(sed 's/\./ /g' <<< "$BUILDAH_VERSION")"
    BUILDAH_MAJOR="$(awk '{print $1}' <<< "$BUILDAH_VERSION_SPACES")"
    BUILDAH_MINOR="$(awk '{print $2}' <<< "$BUILDAH_VERSION_SPACES")"
    BUILDAH_PATCH="$(awk '{print $3}' <<< "$BUILDAH_VERSION_SPACES")"
    BUILDAH_MINIMUM_VERSION="1.33.0"
    BUILDAH_MINIMUM_VERSION_SPACES="$(sed 's/\./ /g' <<< "$BUILDAH_MINIMUM_VERSION")"
    BUILDAH_MINIMUM_MAJOR="$(awk '{print $1}' <<< "$BUILDAH_MINIMUM_VERSION_SPACES")"
    BUILDAH_MINIMUM_MINOR="$(awk '{print $2}' <<< "$BUILDAH_MINIMUM_VERSION_SPACES")"
    BUILDAH_MINIMUM_PATCH="$(awk '{print $3}' <<< "$BUILDAH_MINIMUM_VERSION_SPACES")"
    if [[ $BUILDAH_MAJOR -lt $BUILDAH_MINIMUM_MAJOR ]]; then
      echo "err: buildah $BUILDAH_MINIMUM_VERSION is required, found $BUILDAH_VERSION (major version $BUILDAH_MAJOR < $BUILDAH_MINIMUM_MAJOR)" 1>&2
      exit 1;
    fi
    if [[ $BUILDAH_MINOR -lt $BUILDAH_MINIMUM_MINOR ]]; then
      echo "err: buildah $BUILDAH_MINIMUM_VERSION is required, found $BUILDAH_VERSION (minor version $BUILDAH_MINOR < $BUILDAH_MINIMUM_MINOR)" 1>&2
      exit 1;
    fi
    if [[ $BUILDAH_PATCH -lt $BUILDAH_MINIMUM_PATCH ]]; then
      echo "err: buildah $BUILDAH_MINIMUM_VERSION is required, found $BUILDAH_VERSION (patch version $BUILDAH_PATCH < $BUILDAH_MINIMUM_PATCH)" 1>&2
      exit 1;
    fi
    echo "ok: $OCI_BUILDER (v$BUILDAH_VERSION installed, v$BUILDAH_MINIMUM_VERSION minimum supported)"
  else
    echo "ok: $OCI_BUILDER"
  fi;
}
handleJQ() {
  echo -n "Checking for jq... "
  if [ -z "$JQ" ]; then
    if exists "jq"; then
      JQ="$(which "jq")"
    else
      echo "err: not found" 1>&2
      exit 1;
    fi
  fi;
  echo "ok: $JQ"
}
handleArch() {
  echo -n "Limiting to architecture... "
  if [[ "$LIMIT_TO_ARCH" == "all" ]]; then
    echo "ok: no limit"
  elif [[ "$LIMIT_TO_ARCH" == "current" ]]; then
    echo "ok: current ($(uname -m))"
  else
    case "$LIMIT_TO_ARCH" in
      amd|intel|amd64|x86_64|86_64|i386_64|i686_64|x64|64)
        LIMIT_TO_ARCH="amd64";
        ;;
      i386|i686|x86|86)
        LIMIT_TO_ARCH="amd64";
        ;;
      arm|arm64|aarch64)
        LIMIT_TO_ARCH="arm64";
        ;;
      ppc|ppc64|ppc64le)
        LIMIT_TO_ARCH="ppc64le";
        ;;
      risc|riscv|riscv64)
        LIMIT_TO_ARCH="riscv64";
        ;;
    esac
    echo "ok: $LIMIT_TO_ARCH"
  fi;
}
handleWillPublish() {
  echo -n "Publishing after build... "
  if [[ "$WILL_PUBLISH" == "true" ]]; then
    echo "yes"
    WILL_PUBLISH=true
  else
    WILL_PUBLISH=false
    echo "no"
  fi;
}
handleOCIHost;
handleOCIBuilder;
handleJQ;
handleArch;
handleWillPublish;

mkdir -p contrib/config
echo "OCI_HOST = \"$OCI_HOST\"
OCI_BUILDER = \"$OCI_BUILDER\"
JQ = \"$JQ\"
LIMIT_TO_ARCH = \"$LIMIT_TO_ARCH\"
WILL_PUBLISH = \"$WILL_PUBLISH\"
DEFAULT_PULL_POLICY = \"$DEFAULT_PULL_POLICY\"" > contrib/config/mk
echo "export OCI_HOST=\"$OCI_HOST\"
export OCI_BUILDER=\"$OCI_BUILDER\"
export JQ=\"$JQ\"
export LIMIT_TO_ARCH=\"$LIMIT_TO_ARCH\"
export WILL_PUBLISH=\"$WILL_PUBLISH\"
export DEFAULT_PULL_POLICY=\"$DEFAULT_PULL_POLICY\"" > contrib/config/sh
